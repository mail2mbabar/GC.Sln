// <auto-generated />
using System;
using DBmodels.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBmodels.Migrations
{
    [DbContext(typeof(GcContext))]
    [Migration("20240618115959_GCP")]
    partial class GCP
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DBmodels.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StageId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DBmodels.Models.Constraint", b =>
                {
                    b.Property<long>("ConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("ConstraintId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CriterionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<long>("OptionId")
                        .HasColumnType("bigint");

                    b.Property<int>("OptionId1")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("ConstraintId");

                    b.HasIndex("CriterionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("OptionId1");

                    b.HasIndex("ProjectId");

                    b.ToTable("Constraints");
                });

            modelBuilder.Entity("DBmodels.Models.Criterion", b =>
                {
                    b.Property<long>("CriterionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("CriterionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("CriterionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Criterions");
                });

            modelBuilder.Entity("DBmodels.Models.Evaluation", b =>
                {
                    b.Property<long>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("EvaluationId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CriterionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<long>("OptionId")
                        .HasColumnType("bigint");

                    b.Property<int>("OptionId1")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("EvaluationId");

                    b.HasIndex("CriterionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("OptionId1");

                    b.HasIndex("ProjectId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("DBmodels.Models.GcAttribute", b =>
                {
                    b.Property<long>("GcAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("GcAttributeId"));

                    b.Property<long>("CriterionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("GcAttributeId");

                    b.HasIndex("CriterionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("GcAttributes");
                });

            modelBuilder.Entity("DBmodels.Models.Goal", b =>
                {
                    b.Property<long>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("GoalId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.HasKey("GoalId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("DBmodels.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatededDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("GroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DBmodels.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("OptionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("DBmodels.Models.Preference", b =>
                {
                    b.Property<long>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("PreferenceId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("Criterion1CriterionId")
                        .HasColumnType("bigint");

                    b.Property<long>("Criterion2CriterionId")
                        .HasColumnType("bigint");

                    b.Property<long>("CriterionId1")
                        .HasColumnType("bigint");

                    b.Property<long>("CriterionId2")
                        .HasColumnType("bigint");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("PreferenceId");

                    b.HasIndex("Criterion1CriterionId");

                    b.HasIndex("Criterion2CriterionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("DBmodels.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DBmodels.Models.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("RoleId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DBmodels.Models.Stage", b =>
                {
                    b.Property<long>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("StageId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StageId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("DBmodels.Models.Threshold", b =>
                {
                    b.Property<long>("ThresholdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("ThresholdId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CriterionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("ThresholdId");

                    b.HasIndex("CriterionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("DBmodels.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DBmodels.Models.Comment", b =>
                {
                    b.HasOne("DBmodels.Models.Group", "Group")
                        .WithMany("Comments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("DBmodels.Models.Constraint", b =>
                {
                    b.HasOne("DBmodels.Models.Criterion", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Group");

                    b.Navigation("Option");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DBmodels.Models.Criterion", b =>
                {
                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany("Criterions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DBmodels.Models.Evaluation", b =>
                {
                    b.HasOne("DBmodels.Models.Criterion", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Group", "Member")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Member");

                    b.Navigation("Option");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DBmodels.Models.GcAttribute", b =>
                {
                    b.HasOne("DBmodels.Models.Criterion", "Criterion")
                        .WithMany("GcAttributes")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany("GcAttributes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DBmodels.Models.Goal", b =>
                {
                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany("Goals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DBmodels.Models.Group", b =>
                {
                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany("Groups")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.User", "User")
                        .WithMany("Group")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DBmodels.Models.Option", b =>
                {
                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany("Options")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DBmodels.Models.Preference", b =>
                {
                    b.HasOne("DBmodels.Models.Criterion", "Criterion1")
                        .WithMany()
                        .HasForeignKey("Criterion1CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Criterion", "Criterion2")
                        .WithMany()
                        .HasForeignKey("Criterion2CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Group", "Member")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion1");

                    b.Navigation("Criterion2");

                    b.Navigation("Member");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DBmodels.Models.Threshold", b =>
                {
                    b.HasOne("DBmodels.Models.Criterion", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBmodels.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Group");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DBmodels.Models.User", b =>
                {
                    b.HasOne("DBmodels.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DBmodels.Models.Criterion", b =>
                {
                    b.Navigation("GcAttributes");
                });

            modelBuilder.Entity("DBmodels.Models.Group", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DBmodels.Models.Project", b =>
                {
                    b.Navigation("Criterions");

                    b.Navigation("GcAttributes");

                    b.Navigation("Goals");

                    b.Navigation("Groups");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("DBmodels.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DBmodels.Models.User", b =>
                {
                    b.Navigation("Group");
                });
#pragma warning restore 612, 618
        }
    }
}
